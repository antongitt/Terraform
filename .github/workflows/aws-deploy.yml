name: 'AWS EKS deploy workflow'

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform-backend:
    name: 'Create the remote backend for Terraform job'
    runs-on: ubuntu-latest
    environment: aws

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
        aws-region:  ${{ vars.AWS_REGION }}

    - name: Copy variables file
      run: |
        cd aws/mario
        cp -fr terraform.tfvars ../backend/terraform.tfvars

    - name: Create remote backend
      run: |
        cd aws/backend
        terraform init
        terraform apply -auto-approve
        if [[ $(terraform output -raw bucket) == "" ]]; then
          echo "Remote backend was not created! Exiting script..."
          exit 1
        fi

    - name: Save backend.tf to cache
      uses: actions/cache/save@v4
      with:
        path: aws/mario/backend.tf
        key: backend.tf-key


  terraform-cluster:
    name: 'Create the cluster resources with Terraform job'
    runs-on: ubuntu-latest
    environment: aws
    needs: terraform-backend

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Restore cached backend.tf
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: aws/mario/backend.tf
        key: backend.tf-key
        fail-on-cache-miss: true

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
        aws-region:  ${{ vars.AWS_REGION }}

    - name: Terraform apply to create the cluster resources
      run: |
        cd aws/mario
        echo "$PWD"
        terraform init
        terraform apply -auto-approve


  kubectl:
    name: 'Configure the cluster with kubectl job'
    runs-on: ubuntu-latest
    environment: aws
    needs: terraform-cluster
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
        aws-region:  ${{ vars.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks --region ${{ vars.AWS_REGION }} update-kubeconfig --name ${{ vars.PROJECT_NAME }}-cluster

    - name: Deploy to Kubernetes
      run: |
        cd aws/mario
        echo "$PWD"
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
        kubectl get all
        kubectl describe service mario-service

    - name: Wait for the external hostname of the LoadBalancer to become available
      run: |
        ELB_HOSTNAME=""
        SECONDS=0
        until [ -n "$ELB_HOSTNAME" ] || [ $SECONDS -ge 300 ]; do
          ELB_HOSTNAME=$(kubectl get service/mario-service -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          sleep 10
        done

        if [ -z "$ELB_HOSTNAME" ]; then
          echo "Timeout waiting for the external hostname of the LoadBalancer."
          exit 1
        fi

        echo "::notice Open this URL in your favorite browser::$ELB_HOSTNAME"

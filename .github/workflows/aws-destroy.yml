name: 'AWS EKS destroy workflow'

on:
  workflow_dispatch:

permissions:
  actions: write
  id-token: write
  contents: read

jobs:
  destroy:
    name: 'Destroy job'
    runs-on: ubuntu-latest
    environment: aws

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Restore cached backend.tf
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: aws/mario/backend.tf
        key: aws-backend.tf-key
        fail-on-cache-miss: true

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ vars.AWS_GITHUB_ACTIONS_ROLE }}
        aws-region:  ${{ vars.AWS_REGION }}

    - name: Terraform destroy the cluster resources
      run: |
        cd aws/mario
        echo "$PWD"
        terraform init
        terraform destroy --auto-approve | tee destroy_output.txt

    - name: Annotate Terraform Destroy
      run: |
        cd aws/mario
        OUTPUT=$(cat destroy_output.txt)
        TITLE=$(echo "$OUTPUT" | grep 'complete!')
        CHANGES=$(echo "$OUTPUT" | grep 'complete after' | tr '\n' '| ')
        if [ -n "$TITLE" ] && [ -n "$CHANGES" ]; then
          echo "::notice title=$TITLE::$CHANGES"
        fi

    - name: Extract values from backend.tf
      id: extract
      run: |
        cd aws/mario
        echo "$PWD"
        echo "bucket_name=$(sed -nE 's/^\s*bucket\s*=\s*"([^"]+)".*$/\1/p' backend.tf)" >> $GITHUB_OUTPUT
        echo "dynamodb_table=$(sed -nE 's/^\s*dynamodb_table\s*=\s*"([^"]+)".*$/\1/p' backend.tf)" >> $GITHUB_OUTPUT

    - name: Clean up the backend resources
      continue-on-error: true
      run: |
        aws iam list-attached-role-policies --role-name terraform-backend-role --query "AttachedPolicies[].PolicyArn" --output text | tr '\t' '\n' | xargs -I {} aws iam detach-role-policy --role-name terraform-backend-role --policy-arn {} || true
        aws iam delete-role --role-name terraform-backend-role || true
        aws dynamodb delete-table --table-name ${{ steps.extract.outputs.dynamodb_table }} || true
        aws s3 rm s3://${{ steps.extract.outputs.bucket_name }} --recursive || true
        aws s3api delete-objects --bucket ${{ steps.extract.outputs.bucket_name }} --delete "$(aws s3api list-object-versions --bucket ${{ steps.extract.outputs.bucket_name }} --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" || true
        aws s3api delete-objects --bucket ${{ steps.extract.outputs.bucket_name }} --delete "$(aws s3api list-object-versions --bucket ${{ steps.extract.outputs.bucket_name }} --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" || true
        sleep 10
        aws s3 rb s3://${{ steps.extract.outputs.bucket_name }} --force

    - name: Delete cache if exists
      run: |
        if [[ $(gh cache list --key aws-backend.tf-key) ]]; then
          gh cache delete aws-backend.tf-key
        else
          echo "Cache aws-backend.tf-key not found or already deleted."
        fi
      env:
        GH_TOKEN: ${{ github.token }}
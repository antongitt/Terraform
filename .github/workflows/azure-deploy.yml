name: 'Azure AKS deploy workflow'

on:
  workflow_dispatch:

permissions:
  actions: write
  id-token: write
  contents: read

jobs:
  terraform-backend:
    name: 'Create the remote backend for Terraform job'
    runs-on: ubuntu-latest
    environment: azure

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Delete old cache if exists
      run: |
        if [[ $(gh cache list --key azure-backend.tf-key) ]]; then
          gh cache delete azure-backend.tf-key
        else
          echo "Cache azure-backend.tf-key not found or already deleted."
        fi
      env:
        GH_TOKEN: ${{ github.token }}


    - name: Copy variables file
      run: |
        cd azure/mario
        cp -fr terraform.tfvars ../backend/terraform.tfvars

    - name: Create remote backend
      run: |
        cd azure/backend
        terraform init
        terraform apply -auto-approve
        if [[ $(terraform output -raw container) == "" ]]; then
          echo "Remote backend was not created! Exiting script..."
          exit 1
        fi

    - name: Save backend.tf to cache
      uses: actions/cache/save@v4
      with:
        path: azure/mario/backend.tf
        key: azure-backend.tf-key


  terraform-cluster:
    name: 'Create the cluster resources with Terraform job'
    runs-on: ubuntu-latest
    environment: azure
    needs: terraform-backend

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Restore cached backend.tf
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: azure/mario/backend.tf
        key: azure-backend.tf-key
        fail-on-cache-miss: true

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform apply to create the cluster resources
      run: |
        cd azure/mario
        echo "$PWD"
        terraform init
        terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true


  kubectl:
    name: 'Configure the cluster with kubectl job'
    runs-on: ubuntu-latest
    environment: azure
    needs: terraform-cluster
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get access credentials for a managed Kubernetes cluster
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az aks get-credentials --resource-group $(terraform output -raw rg_name) --name $(terraform output -raw cluster_name) --overwrite-existing

    - name: Deploy to Kubernetes
      run: |
        cd azure/mario
        echo "$PWD"
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml
        kubectl get all
        kubectl describe service mario-service

    - name: Wait for the external hostname of the LoadBalancer to become available
      run: |
        ELB_HOSTNAME=""
        SECONDS=0
        until [ -n "$ELB_HOSTNAME" ] || [ $SECONDS -ge 300 ]; do
          ELB_HOSTNAME=$(kubectl get service/mario-service -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          sleep 10
        done

        if [ -z "$ELB_HOSTNAME" ]; then
          echo "Timeout waiting for the external hostname of the LoadBalancer."
          exit 1
        fi

        echo "::notice title=Open this URL in your favorite browser::$ELB_HOSTNAME"

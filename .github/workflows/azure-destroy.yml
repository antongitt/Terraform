name: 'Azure AKS destroy workflow'

on:
  workflow_dispatch:

permissions:
  actions: write
  id-token: write
  contents: read

jobs:
  destroy:
    name: 'Destroy job'
    runs-on: ubuntu-latest
    environment: azure

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Restore cached backend.tf
      uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: azure/mario/backend.tf
        key: azure-backend.tf-key
        fail-on-cache-miss: true

    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform destroy the cluster resources
      run: |
        cd azure/mario
        echo "$PWD"
        terraform init
        terraform destroy --auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Extract values from backend.tf
      id: extract
      run: |
        cd azure/mario
        echo "$PWD"
        echo "resource_group_name=$(sed -nE 's/^\s*resource_group_name\s*=\s*"([^"]+)".*$/\1/p' backend.tf)" >> $GITHUB_OUTPUT

    - name: Clean up the backend resources
      uses: azure/cli@v2
      with:
        azcliversion: latest
        inlineScript: |
          az group delete --name "${{ steps.extract.outputs.resource_group_name }}" --yes

    - name: Delete cache if exists
      run: |
        if [[ $(gh cache list --key azure-backend.tf-key) ]]; then
          gh cache delete azure-backend.tf-key
        else
          echo "Cache azure-backend.tf-key not found or already deleted."
        fi
      env:
        GH_TOKEN: ${{ github.token }}